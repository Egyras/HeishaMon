#include "stdint.h"

const uint16_t DECODE_MAX_BUFFER_SIZE = 255;
const uint16_t DECODE_REGULAR_DATAGRAM_SIZE = 203;
const uint16_t DECODE_OPT_DATAGRAM_SIZE = 20;
const uint16_t DECODE_MAX_TOPIC_LEN = 64;

typedef enum
{
    HEATPUMP_TOPIC_HEATPUMP_STATE,
    HEATPUMP_TOPIC_PUMP_FLOW,
    HEATPUMP_TOPIC_FORCE_DHW_STATE,
    HEATPUMP_TOPIC_QUIET_MODE_SCHEDULE,
    HEATPUMP_TOPIC_OPERATING_MODE_STATE,
    HEATPUMP_TOPIC_MAIN_INLET_TEMP,
    HEATPUMP_TOPIC_MAIN_OUTLET_TEMP,
    HEATPUMP_TOPIC_MAIN_TARGET_TEMP,
    HEATPUMP_TOPIC_COMPRESSOR_FREQ,
    HEATPUMP_TOPIC_DHW_TARGET_TEMP,
    HEATPUMP_TOPIC_DHW_TEMP,
    HEATPUMP_TOPIC_OPERATIONS_HOURS,
    HEATPUMP_TOPIC_OPERATIONS_COUNTER,
    HEATPUMP_TOPIC_MAIN_SCHEDULE_STATE,
    HEATPUMP_TOPIC_OUTSIDE_TEMP,
    HEATPUMP_TOPIC_HEAT_ENERGY_PRODUCTION,
    HEATPUMP_TOPIC_HEAT_ENERGY_CONSUMPTION,
    HEATPUMP_TOPIC_POWERFUL_MODE_TIME,
    HEATPUMP_TOPIC_QUIET_MODE_LEVEL,
    HEATPUMP_TOPIC_HOLIDAY_MODE_STATE,
    HEATPUMP_TOPIC_THREEWAY_VALVE_STATE,
    HEATPUMP_TOPIC_OUTSIDE_PIPE_TEMP,
    HEATPUMP_TOPIC_DHW_HEAT_DELTA,
    HEATPUMP_TOPIC_HEAT_DELTA,
    HEATPUMP_TOPIC_COOL_DELTA,
    HEATPUMP_TOPIC_DHW_HOLIDAY_SHIFT_TEMP,
    HEATPUMP_TOPIC_DEFROSTING_STATE,
    HEATPUMP_TOPIC_Z1_HEAT_REQUEST_TEMP,
    HEATPUMP_TOPIC_Z1_COOL_REQUEST_TEMP,
    HEATPUMP_TOPIC_Z1_HEAT_CURVE_TARGET_HIGH_TEMP,
    HEATPUMP_TOPIC_Z1_HEAT_CURVE_TARGET_LOW_TEMP,
    HEATPUMP_TOPIC_Z1_HEAT_CURVE_OUTSIDE_HIGH_TEMP,
    HEATPUMP_TOPIC_Z1_HEAT_CURVE_OUTSIDE_LOW_TEMP,
    HEATPUMP_TOPIC_ROOM_THERMOSTAT_TEMP,
    HEATPUMP_TOPIC_Z2_HEAT_REQUEST_TEMP,
    HEATPUMP_TOPIC_Z2_COOL_REQUEST_TEMP,
    HEATPUMP_TOPIC_Z1_WATER_TEMP,
    HEATPUMP_TOPIC_Z2_WATER_TEMP,
    HEATPUMP_TOPIC_COOL_ENERGY_PRODUCTION,
    HEATPUMP_TOPIC_COOL_ENERGY_CONSUMPTION,
    HEATPUMP_TOPIC_DHW_ENERGY_PRODUCTION,
    HEATPUMP_TOPIC_DHW_ENERGY_CONSUMPTION,
    HEATPUMP_TOPIC_Z1_WATER_TARGET_TEMP,
    HEATPUMP_TOPIC_Z2_WATER_TARGET_TEMP,
    HEATPUMP_TOPIC_ERROR,
    HEATPUMP_TOPIC_ROOM_HOLIDAY_SHIFT_TEMP,
    HEATPUMP_TOPIC_BUFFER_TEMP,
    HEATPUMP_TOPIC_SOLAR_TEMP,
    HEATPUMP_TOPIC_POOL_TEMP,
    HEATPUMP_TOPIC_MAIN_HEX_OUTLET_TEMP,
    HEATPUMP_TOPIC_DISCHARGE_TEMP,
    HEATPUMP_TOPIC_INSIDE_PIPE_TEMP,
    HEATPUMP_TOPIC_DEFROST_TEMP,
    HEATPUMP_TOPIC_EVA_OUTLET_TEMP,
    HEATPUMP_TOPIC_BYPASS_OUTLET_TEMP,
    HEATPUMP_TOPIC_IPM_TEMP,
    HEATPUMP_TOPIC_Z1_TEMP,
    HEATPUMP_TOPIC_Z2_TEMP,
    HEATPUMP_TOPIC_DHW_HEATER_STATE,
    HEATPUMP_TOPIC_ROOM_HEATER_STATE,
    HEATPUMP_TOPIC_INTERNAL_HEATER_STATE,
    HEATPUMP_TOPIC_EXTERNAL_HEATER_STATE,
    HEATPUMP_TOPIC_FAN1_MOTOR_SPEED,
    HEATPUMP_TOPIC_FAN2_MOTOR_SPEED,
    HEATPUMP_TOPIC_HIGH_PRESSURE,
    HEATPUMP_TOPIC_PUMP_SPEED,
    HEATPUMP_TOPIC_LOW_PRESSURE,
    HEATPUMP_TOPIC_COMPRESSOR_CURRENT,
    HEATPUMP_TOPIC_FORCE_HEATER_STATE,
    HEATPUMP_TOPIC_STERILIZATION_STATE,
    HEATPUMP_TOPIC_STERILIZATION_TEMP,
    HEATPUMP_TOPIC_STERILIZATION_MAX_TIME,
    HEATPUMP_TOPIC_Z1_COOL_CURVE_TARGET_HIGH_TEMP,
    HEATPUMP_TOPIC_Z1_COOL_CURVE_TARGET_LOW_TEMP,
    HEATPUMP_TOPIC_Z1_COOL_CURVE_OUTSIDE_HIGH_TEMP,
    HEATPUMP_TOPIC_Z1_COOL_CURVE_OUTSIDE_LOW_TEMP,
    HEATPUMP_TOPIC_HEATING_MODE,
    HEATPUMP_TOPIC_HEATING_OFF_OUTDOOR_TEMP,
    HEATPUMP_TOPIC_HEATER_ON_OUTDOOR_TEMP,
    HEATPUMP_TOPIC_HEAT_TO_COOL_TEMP,
    HEATPUMP_TOPIC_COOL_TO_HEAT_TEMP,
    HEATPUMP_TOPIC_COOLING_MODE,
    HEATPUMP_TOPIC_Z2_HEAT_CURVE_TARGET_HIGH_TEMP,
    HEATPUMP_TOPIC_Z2_HEAT_CURVE_TARGET_LOW_TEMP,
    HEATPUMP_TOPIC_Z2_HEAT_CURVE_OUTSIDE_HIGH_TEMP,
    HEATPUMP_TOPIC_Z2_HEAT_CURVE_OUTSIDE_LOW_TEMP,
    HEATPUMP_TOPIC_Z2_COOL_CURVE_TARGET_HIGH_TEMP,
    HEATPUMP_TOPIC_Z2_COOL_CURVE_TARGET_LOW_TEMP,
    HEATPUMP_TOPIC_Z2_COOL_CURVE_OUTSIDE_HIGH_TEMP,
    HEATPUMP_TOPIC_Z2_COOL_CURVE_OUTSIDE_LOW_TEMP,
    HEATPUMP_TOPIC_ROOM_HEATER_OPERATIONS_HOURS,
    HEATPUMP_TOPIC_DHW_HEATER_OPERATIONS_HOURS,
    HEATPUMP_TOPIC_HEAT_PUMP_MODEL,
    HEATPUMP_TOPIC_PUMP_DUTY,
    HEATPUMP_TOPIC_ZONES_STATE,
    HEATPUMP_TOPIC_MAX_PUMP_DUTY,
    HEATPUMP_TOPIC_HEATER_DELAY_TIME,
    HEATPUMP_TOPIC_HEATER_START_DELTA,
    HEATPUMP_TOPIC_HEATER_STOP_DELTA,
    HEATPUMP_TOPIC_BUFFER_INSTALLED,
    HEATPUMP_TOPIC_DHW_INSTALLED,
    HEATPUMP_TOPIC_SOLAR_MODE,
    HEATPUMP_TOPIC_SOLAR_ON_DELTA,
    HEATPUMP_TOPIC_SOLAR_OFF_DELTA,
    HEATPUMP_TOPIC_SOLAR_FROST_PROTECTION,
    HEATPUMP_TOPIC_SOLAR_HIGH_LIMIT,
    HEATPUMP_TOPIC_PUMP_FLOWRATE_MODE,
    HEATPUMP_TOPIC_LIQUID_TYPE,
    HEATPUMP_TOPIC_ALT_EXTERNAL_SENSOR,
    HEATPUMP_TOPIC_ANTI_FREEZE_MODE,
    HEATPUMP_TOPIC_OPTIONAL_PCB,
    HEATPUMP_TOPIC_Z1_SENSOR_SETTINGS,
    HEATPUMP_TOPIC_Z2_SENSOR_SETTINGS,
    HEATPUMP_TOPIC_BUFFER_TANK_DELTA,
    HEATPUMP_TOPIC_EXTERNAL_PAD_HEATER,
    HEATPUMP_TOPIC_Last,
} heatpump_topic_t;

typedef enum
{

    HEATPUMP_TOPIC_OPT_Z1_Water_Pump,
    HEATPUMP_TOPIC_OPT_Z1_Mixing_Valve,
    HEATPUMP_TOPIC_OPT_Z2_Water_Pump,
    HEATPUMP_TOPIC_OPT_Z2_Mixing_Valve,
    HEATPUMP_TOPIC_OPT_Pool_Water_Pump,
    HEATPUMP_TOPIC_OPT_Solar_Water_Pump,
    HEATPUMP_TOPIC_OPT_Alarm_State,
    HEATPUMP_TOPIC_OPT_Last,
} heatpump_opt_topic_t;

typedef enum
{
    DECODE_RESULT_INT,
    DECODE_RESULT_FLOAT,
    DECODE_RESULT_STRING,
    DECODE_RESULT_Last
} decode_result_type_t;

typedef struct
{
    decode_result_type_t result_type;
    union
    {
        int int_value;
        float float_value;
        char string_value[64];
    };
} decode_result_t;

typedef enum
{
    DECODER_BUFFER_VALIDATION_REGULAR_DATAGRAM_OK,
    DECODER_BUFFER_VALIDATION_OPT_DATAGRAM_OK,
    DECODER_BUFFER_VALIDATION_INCOMPLETE,
    DECODER_BUFFER_VALIDATION_INVALID,
    DECODER_BUFFER_VALIDATION_INVALID_HEADER,
    DECODER_BUFFER_VALIDATION_INVALID_CRC,
    DECODER_BUFFER_VALIDATION_INVALID_LENGTH,
} decoder_buffer_validation_result_t;

decoder_buffer_validation_result_t decode_validate_buffer(uint8_t data[DECODE_MAX_BUFFER_SIZE], uint16_t data_len);

void decode_heatpump_data(uint8_t data[DECODE_MAX_BUFFER_SIZE]);
void decode_heatpump_opt_data(uint8_t data[DECODE_MAX_BUFFER_SIZE]);

void decode_get_topic_value(heatpump_topic_t topic, uint8_t *data, decode_result_t *result, bool get_latest_unfiltered_value = true);
bool decode_result_compare_equal(decode_result_t *result_first, decode_result_t *result_second);
void decode_result_to_string(decode_result_t *result, char *buffer, uint16_t buffer_size);

const char *decode_get_topic_name(heatpump_topic_t topic);
const char *decode_get_opt_topic_name(heatpump_opt_topic_t topic);

const char *decode_get_description_text(heatpump_topic_t topic, uint8_t description_idx);
uint8_t decode_get_description_cnt(heatpump_topic_t topic);

void decode_topic_clear_filters();
void decode_topic_update_value_filter(heatpump_topic_t topic, float value);
void decode_topic_clear_filter(heatpump_topic_t topic);
uint16_t decode_get_max_filter_depth();