#include "commands.h"

const char* mqtt_topic_values = "sdc";
const char* mqtt_topic_1wire = "1wire";
const char* mqtt_topic_s0 = "s0";
const char* mqtt_logtopic = "log";
const char* mqtt_topic_pcb = "pcb/#";

const char* mqtt_willtopic = "LWT";
const char* mqtt_iptopic = "ip";

const char* mqtt_send_raw_value_topic = "SendRawValue";

static unsigned int temp2hex(float temp) {
  int hextemp = 0;
  if(temp > 120) {
    hextemp = 0;
  } else if(temp < -78) {
    hextemp = 255;
  } else {
    byte Uref = 255;
    int constant = 3695;
    int R25 = 6340;
    byte T25 = 25;
    int Rf = 6480;
    float K = 273.15;
    float RT = R25 * exp(constant * (1 / (temp + K) - 1 / (T25 + K)));
    hextemp = Uref * (RT / (Rf + RT));
  }
  return hextemp;
}

unsigned int set_heatpump_state(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned  len = 0;
  byte heatpump_state = 1;
  String set_heatpump_state_string(msg);

  if ( set_heatpump_state_string.toInt() == 1 ) {
    heatpump_state = 2;
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set heatpump state to %d", heatpump_state);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, heatpump_state, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_pump(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_pump_string(msg);

  byte pump_state = 16;
  if ( set_pump_string.toInt() == 1 ) {
    pump_state = 32;
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set pump state to %d", pump_state);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, pump_state, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_pump_speed(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_pumpspeed_string(msg);

  byte pumpspeed = set_pumpspeed_string.toInt() + 1;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set pump speed to %d", pumpspeed - 1);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, pumpspeed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_quiet_mode(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_quiet_mode_string(msg);

  byte quiet_mode = (set_quiet_mode_string.toInt() + 1) * 8;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set Quiet mode to %d", quiet_mode / 8 - 1);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, quiet_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_z1_heat_request_temperature(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_temperature_string(msg);

  byte request_temp = set_temperature_string.toInt() + 128;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set z1 heat request temperature to %d", request_temp - 128 );
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_z1_cool_request_temperature(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_temperature_string(msg);

  byte request_temp = set_temperature_string.toInt() + 128;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set z1 cool request temperature to %d", request_temp - 128 );
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_z2_heat_request_temperature(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_temperature_string(msg);

  byte request_temp = set_temperature_string.toInt() + 128;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set z2 heat request temperature to %d", request_temp - 128 );
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_z2_cool_request_temperature(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_temperature_string(msg);

  byte request_temp = set_temperature_string.toInt() + 128;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set z2 cool request temperature to %d", request_temp - 128 );
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_force_DHW(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_force_DHW_string(msg);

  byte force_DHW_mode = 64; //hex 0x40
  if ( set_force_DHW_string.toInt() == 1 ) {
    force_DHW_mode = 128; //hex 0x80
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set force DHW mode to %d", force_DHW_mode);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, force_DHW_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_force_defrost(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_force_defrost_string(msg);

  byte force_defrost_mode = 0;
  if ( set_force_defrost_string.toInt() == 1 ) {
    force_defrost_mode = 2; //hex 0x02
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set force defrost mode to %d", force_defrost_mode);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, force_defrost_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_force_sterilization(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_force_sterilization_string(msg);

  byte force_sterilization_mode = 0;
  if ( set_force_sterilization_string.toInt() == 1 ) {
    force_sterilization_mode = 4; //hex 0x04
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set force sterilization mode to %d", force_sterilization_mode);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, force_sterilization_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_holiday_mode(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_holiday_string(msg);

  byte set_holiday = 16; //hex 0x10
  if ( set_holiday_string.toInt() == 1 ) {
    set_holiday = 32; //hex 0x20
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set holiday mode to %d", set_holiday);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, set_holiday, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_powerful_mode(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_powerful_string(msg);

  byte set_powerful = (set_powerful_string.toInt() ) + 73;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set powerful mode to %d", (set_powerful - 73) );
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, set_powerful, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_DHW_temp(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_DHW_temp_string(msg);

  byte set_DHW_temp = set_DHW_temp_string.toInt() + 128;

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set DHW temperature to %d", set_DHW_temp - 128);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, set_DHW_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_operation_mode(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_mode_string(msg);

  byte set_mode;
  switch (set_mode_string.toInt()) {
    case 0: set_mode = 18; break;
    case 1: set_mode = 19; break;
    case 2: set_mode = 24; break;
    case 3: set_mode = 33; break;
    case 4: set_mode = 34; break;
    case 5: set_mode = 35; break;
    case 6: set_mode = 40; break;
    default: set_mode = 0; break;
  }

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set heat pump mode to %d", set_mode);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, set_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_bit_6(char *msg, unsigned char **cmd, int base, int bit, char **log_msg) {
  unsigned int len = 0;
  String set_pcb_string(msg);

  bool set_pcb_value = (set_pcb_string.toInt() == 1);
  unsigned char hex = (0x40 & ~(base << bit)) | (set_pcb_value << bit);

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set optional pcb '%s' to state %d (%02x)", __FUNCTION__, set_pcb_value, hex);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x11, 0x01, 0x50, 0x00, 0x00, hex, 0xff, 0xff, 0xe5, 0xff, 0xff, 0x00, 0xff, 0xeb, 0xff, 0xff, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_heat_cool_mode(char *msg, unsigned char **cmd, char **log_msg) {
  return set_bit_6(msg, cmd, 0b1, 7, log_msg);
}

unsigned int set_compressor_state(char *msg, unsigned char **cmd, char **log_msg) {
  return set_bit_6(msg, cmd, 0b1, 6, log_msg);
}

unsigned int set_smart_grid_mode(char *msg, unsigned char **cmd, char **log_msg) {
  return set_bit_6(msg, cmd, 0b11, 4, log_msg);
}

unsigned int set_external_thermostat_1_state(char *msg, unsigned char **cmd, char **log_msg) {
  return set_bit_6(msg, cmd, 0b11, 2, log_msg);
}

unsigned int set_external_thermostat_2_state(char *msg, unsigned char **cmd, char **log_msg) {
  return set_bit_6(msg, cmd, 0b11, 0, log_msg);
}

unsigned int set_demand_control(char *msg, unsigned char **cmd, char **log_msg) {
  unsigned int len = 0;
  String set_pcb_string(msg);

  byte set_pcb_value = set_pcb_string.toInt();

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set optional pcb '%s' to %02x", __FUNCTION__, set_pcb_value);
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x11, 0x01, 0x50, 0x00, 0x00, 0x40, 0xff, 0xff, 0xe5, 0xff, 0xff, 0x00, 0xff, set_pcb_value, 0xff, 0xff, 0x00, 0x00};

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_xxx_temp(char *msg, unsigned char **cmd, char **log_msg, int byte, const char *func) {
  unsigned int len = 0;
  String set_pcb_string(msg);

  float temp = set_pcb_string.toFloat();

  {
    char tmp[256] = { 0 };
    snprintf(tmp, 255, "set optional pcb '%s' to temp %.2f (%02x)", func, temp, temp2hex(temp));
    memcpy(*log_msg, tmp, sizeof(tmp));
  }

  {
    unsigned char tmp[] = {0xf1, 0x11, 0x01, 0x50, 0x00, 0x00, 0x40, 0xff, 0xff, 0xe5, 0xff, 0xff, 0x00, 0xff, 0xeb, 0xff, 0xff, 0x00, 0x00};
    tmp[byte] = temp2hex(temp);

    len = sizeof(tmp);
    memcpy(*cmd, tmp, len);
  }

  return len;
}

unsigned int set_pool_temp(char *msg, unsigned char **cmd, char **log_msg) {
  return set_xxx_temp(msg, cmd, log_msg, 7, __FUNCTION__);
}

unsigned int set_buffer_temp(char *msg, unsigned char **cmd, char **log_msg) {
  return set_xxx_temp(msg, cmd, log_msg, 8, __FUNCTION__);
}

unsigned int set_z1_room_temp(char *msg, unsigned char **cmd, char **log_msg){
  return set_xxx_temp(msg, cmd, log_msg, 10, __FUNCTION__);
}

unsigned int set_z1_water_temp(char *msg, unsigned char **cmd, char **log_msg){
  return set_xxx_temp(msg, cmd, log_msg, 16, __FUNCTION__);
}

unsigned int set_z2_room_temp(char *msg, unsigned char **cmd, char **log_msg) {
  return set_xxx_temp(msg, cmd, log_msg, 11, __FUNCTION__);
}

unsigned int set_z2_water_temp(char *msg, unsigned char **cmd, char **log_msg){
  return set_xxx_temp(msg, cmd, log_msg, 15, __FUNCTION__);
}

unsigned int set_solar_temp(char *msg, unsigned char **cmd, char **log_msg){
  return set_xxx_temp(msg, cmd, log_msg, 13, __FUNCTION__);
}

void send_heatpump_command(char* topic, char *msg, bool (*send_command)(byte*, int), void (*log_message)(char*)) {
  unsigned char cmd[256] = { 0 }, *p = cmd;
  char log_msg[256] = { 0 }, *l = log_msg;
  unsigned int len = 0;

  int arraysize = sizeof(commands) / sizeof(commands[0]);
  int i = 0;

  for (i = 0; i < arraysize; i++) {
    if (strcmp(topic, commands[i].name) == 0) {
      len = commands[i].func(msg, &p, &l);
      log_message(log_msg);
      send_command(cmd, len);
    }
  }
}